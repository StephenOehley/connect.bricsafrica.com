@model BricsWeb.LocalModels.ProductViewModel
@{
    ViewBag.Title = "Product Profile";
    Layout = "~/Views/Shared/_BusinessGeneratorLayout.cshtml";
}

<link href="../../Content/Styles/jquery.treeview.css" rel="stylesheet" type="text/css" />
<link href="../../Content/Styles/vakata-Stylesheet.css" rel="stylesheet" type="text/css" />
<link href="../../Content/Styles/jquery.Treeview-Stylesheet.css" rel="stylesheet" type="text/css" />
<link href="../../Content/Styles/treeView.DefaultStyle.css" rel="stylesheet" type="text/css" />

<style type="text/css" id="jstree-types-stylesheet">
    .jstree-0 a > .jstree-icon
    {
        background-image: url(../../Content/Images/Tree/file.png);
        background-position: 0 0;
    }
    .jstree-0 li[rel=folder] > a > .jstree-icon
    {
        background-image: url('../../Content/Images/Tree/folder.png');
        background-position: 0 0;
    }
    .jstree-0 li[rel=drive] > a > .jstree-icon
    {
        background-image: url(../../Content/Images/Tree/root.png);
        background-position: 0 0;
    }
    .jstree-default ins
    {
        background-image: url("../../Content/Images/Tree/d.png");
        background-repeat: no-repeat;
        background-color: transparent;
    }
    #jstree-marker.jstree-default
    {
        background: url("../../Content/Images/Tree/d.png") -41px -57px no-repeat !important;
        text-indent: -100px;
    }
    #vakata-dragged.jstree-default .jstree-ok
    {
        background: url('../../Content/Images/Tree/d.png') no-repeat -2px -53px !important;
    }
    #vakata-dragged.jstree-default .jstree-invalid
    {
        background: url('../../Content/Images/Tree/d.png') no-repeat -18px -53px !important;
    }
    #jstree-marker.jstree-default
    {
        background: url('../../Content/Images/Tree/d.png') no-repeat -41px -57px !important;
        text-indent: -100px;
    }
    .jstree-default ins
    {
        background-image: url('../../Content/Images/Tree/d.png');
        background-repeat: no-repeat;
        background-color: transparent;
    }
    .jstree-default a.jstree-loading .jstree-icon
     { 
         background:url('../../Content/Images/Shared/throbber.gif') no-repeat center !important;
     }
</style>

<div id="contentcentrecontainer" class="form-profile clearfix">
    <img src="../../Content/Images/BusinessGenerator/step_product.png" />
    <br />
    <br />
    <div id="contentcentreleft" class="left">
        <form action="/product/edit" enctype="multipart/form-data" id="saveform"
        method="post" class="form-padding">
        <h1 class="text-bg-formcontent"> My Products</h1>
        <br />
        <div class="productedit">
            <img src="../../Content/Images/BusinessGenerator/Plus.png" class="left" />
                <a id="create" href="#create" class="be-textblue">&nbsp;&nbsp;Add Product</a>
        </div>
        <div class="productedit">
            <img src="../../Content/Images/BusinessGenerator/Minus.png" class="left" />
            <a id="remove" href="#delete" class="be-textblue">&nbsp;&nbsp;Remove Product</a>
        </div>
        <div class="productedit">
            <img src="../../Content/Images/BusinessGenerator/Refresh.png" class="left" />
                <a id="refresh" href="#refresh" class="be-textblue">&nbsp;&nbsp;Refresh...</a>
        </div>
        <br />
        <div class="text-allcontent">
         @Html.Label("Product List")
        </div>
        <br />
        <div id="ProductListContainer">
        @Html.Action("GetProductsAsPartialView","Product")
        </div>
        </form>
    </div>
    <div id="contentcentrecentre" class="left text-allcontent form-padding clearfix">
        <h1 class="text-bg-formcontent">Product Information</h1>
        <br />
       <div id="ProductFormContainer">
       @Html.Action("GetEditFormAsPartialView", "Product", new { id = Model.ProductData.RowKey })
       </div>
    </div>
    <div id="contentcentreright" class="left leftmargin overflow">
        <h1 class="text-bg-formcontent">Category Selection</h1>
        <br />
        <div class="text-allcontent">
        @Html.Label("Click the arrow to expand tree")
        </div>       
        <div id="categorytree" class="jstree jstree-0 jstree-focused jstree-default">        
        </div>
    </div>
</div>

<script src="../../Scripts/jquery.form.js" type="text/javascript"></script>
<script src="../../Scripts/jquery.hotkeys.js" type="text/javascript"></script>
<script src="../../Scripts/jquery.jstree.js" type="text/javascript"></script>
<script language="javascript" type="text/javascript">
    $(document).ready(function () {
        new setupAjaxTree();
        new setupAjaxForm('productform');

        $("#create").click(function (event) {
            new event.preventDefault();
            new event.stopPropagation();

            $('#productform').unbind('submit').find('input:submit,input:image,button:submit').unbind('click');

            $.get('/product/GetEditFormAsPartialView', function (data) {
                $('#ProductFormContainer').html(data);
                new setupAjaxForm('productform');
            })
        });

        $("#remove").click(function (event) {
            event.preventDefault();
            event.stopPropagation();

            var rk = $('#RowKey').val();
            if (rk != undefined) {
                var productrowkey = encodeURIComponent(rk);
                $.get('/product/delete?id=' + productrowkey, function (data) {

                })

                $.getJSON('/product/GetProductsAsPartialView', function (productdata) {
                    new refreshProductList();
                    $('#ProductFormContainer').contents().remove();
                })
            }
        });

        $("#refresh").click(function (event) {
            event.preventDefault();
            event.stopPropagation();

            new refreshProductList();

        });

        new bindEditLink();
    });

    $('#photofile').change(function () {

        if (typeof FileReader !== "undefined") {
            var size = document.getElementById('photofile').files[0].size;
            // check file size

            if (size > 2000000) {
                $(this).val("");
                alert("The image you selected is too large. File size must be less than 2MB");
            }
        }

    });


    function refreshProductList() {
        $(".editlink").unbind('click');

        $.get('/product/GetProductsAsPartialView', function (data) {
            $('#ProductListContainer').html(data);
            new bindEditLink();
        })
    }

    function bindEditLink() {
        $(".editlink").click(function (event) {
            var rowkey = encodeURIComponent($(this).attr('href'));
            var uri = '/product/GetEditFormAsPartialView?id=' + rowkey;

            event.preventDefault();
            event.stopPropagation();

            $('#productform').unbind('submit').find('input:submit,input:image,button:submit').unbind('click');

            $.get(uri, function (data) {
                $('#ProductFormContainer').html(data);
                new setupAjaxForm('productform');
            })
        });
    }

    function setupAjaxForm(form_id, form_validations) {
        var form = '#' + form_id;
        var form_message = form + '-message';

        // en/disable submit button
        var disableSubmit = function (val) {
            $(form + ' input[type=submit]').attr('disabled', val);
        };

        // setup saving message
        $(form).ajaxSend(function () {

        });

        // setup jQuery Plugin 'ajaxForm'
        var options = {
            dataType: 'json',
            beforeSubmit: function () {
                // run form validations if they exist
                if (typeof form_validations == "function" && !form_validations()) {
                    // this will prevent the form from being subitted
                    return false;
                }
                $(form_message).removeClass().addClass('saving').html('Saving...').fadeIn();
                disableSubmit(true);
            },
            success: function (json) {
                $(form_message).hide();
                $(form_message).removeClass().addClass(json.status).html(json.message).fadeIn('slow');
                disableSubmit(false);
                $("#productphoto").attr("src", json.photourl);
                var productname = $('#ProductName').val();
                var productrowkey = $('#RowKey').val();
                new refreshProductList();//TODO: Optimize by eliminating server call
            }
        };
        $(form).ajaxForm(options);
    }

    function setupAjaxTree() {
        $(function () {

            $("#categorytree")
	.bind("before.jstree", function (e, data) {
	    $("#alog").append(data.func + "<br />");
	})
	.jstree({
	    // List of active plugins
	    "plugins": [
			"themes", "json_data", "ui", "crrm", "dnd", "search", "types"
		],

	    // I usually configure the plugin that handles the data first
	    // This example uses JSON as it is most common
	    "json_data": {
	        // This tree is ajax enabled - as this is most common, and maybe a bit more complex
	        // All the options are almost the same as jQuery's AJAX (read the docs)
	        "ajax": {
	            // the URL to fetch the data
	            "url": "/category/GetCategoryChildrenAsJson",
	            "type": 'POST',
	            // the `data` function is executed in the instance's scope
	            // the parameter is the node being loaded 
	            // (may be -1, 0, or undefined when loading the root nodes)
	            "data": function (n) {
	                // the result is fed to the AJAX request `data` option
	                return {
	                    "id": n.attr ? n.attr("id").replace("node_", "") : 1
	                };
	            }
	        }
	    },
	    "themes": {
	        "theme": "default",
	        "url": "../../Content/Styles/jsTree.Theme.Metro.css"
	    },
	    // Configuring the search plugin
	    "search": {
	        // As this has been a common question - async search
	        // Same as above - the `ajax` config option is actually jQuery's AJAX object
	        "ajax": {
	            "url": "/static/v.1.0pre/_demo/server.php",
	            // You get the search string as a parameter
	            "data": function (str) {
	                return {
	                    "operation": "search",
	                    "search_str": str
	                };
	            }
	        }
	    },
	    // Using types - most of the time this is an overkill
	    // read the docs carefully to decide whether you need types
	    "types": {
	        // I set both options to -2, as I do not need depth and children count checking
	        // Those two checks may slow jstree a lot, so use only when needed
	        "max_depth": -2,
	        "max_children": -2,
	        // I want only `drive` nodes to be root nodes 
	        // This will prevent moving or creating any other type as a root node
	        "valid_children": ["drive"],
	        "types": {
	            // The default type
	            "default": {
	                // I want this type to have no children (so only leaf nodes)
	                // In my case - those are files
	                "valid_children": "none",
	                // If we specify an icon for the default type it WILL OVERRIDE the theme icons
	                "icon": {
	                    "image": "../../Content/Images/Tree/file.png"
	                }
	            },
	            // The `folder` type
	            "folder": {
	                // can have files and other folders inside of it, but NOT `drive` nodes
	                "valid_children": ["default", "folder"],
	                "icon": {
	                    "image": "../../Content/Images/Tree/folder.png"
	                }
	            },
	            // The `drive` nodes 
	            "drive": {
	                // can have files and folders inside, but NOT other `drive` nodes
	                "valid_children": ["default", "folder"],
	                "icon": {
	                    "image": "../../Content/Images/Tree/root.png"
	                },
	                // those prevent the functions with the same name to be used on `drive` nodes
	                // internally the `before` event is used
	                "start_drag": false,
	                "move_node": false,
	                "delete_node": false,
	                "remove": false
	            }
	        }
	    },
	    // UI & core - the nodes to initially select and open will be overwritten by the cookie plugin

	    // the UI plugin - it handles selecting/deselecting/hovering nodes
	    "ui": {
	        // this makes the node with ID node_4 selected onload
	        "initially_select": ["node_4"]
	    },
	    // the core plugin - not many options here
	    "core": {
	        // just open those two nodes up
	        // as this is an AJAX enabled tree, both will be downloaded from the server
	        "initially_open": ["node_2", "node_3"]
	    }
	})
    .bind("select_node.jstree", function (event, data) {
        var id = data.rslt.obj.attr("id").replace("node_", "");

        $.post('/category/CheckForChildrenAsJson?id=' + id, function (result) {
            var r = result;
            if (result.status == "false") {
                $("#CategoryID").val(id);
                $("#CategoryName").val(data.rslt.obj.attr("displaytext"));
            }
        })
    })
        });
    }

</script>
